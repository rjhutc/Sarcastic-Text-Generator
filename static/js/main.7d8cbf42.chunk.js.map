{"version":3,"sources":["Options.js","transformText.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Options","props","useState","options","state","setState","changeState","newState","setOptions","Grid","container","direction","alignItems","justify","RadioGroup","row","value","radio1","onChange","event","stateCopy","target","FormControlLabel","control","Radio","label","radio2","disableCheckBoxes","startLower","startUpper","Checkbox","checked","disabled","showBackground","cursed","require","getChar","char","num","Math","floor","random","length","App","input","setInput","output","setOutput","showAlert","setShowAlert","useEffect","toUpperCase","i","c","toLowerCase","alt","transformText","document","getElementById","className","alert","Alert","onClose","Box","padding","Typography","variant","align","m","TextField","multiline","fullWidth","placeholder","readOnly","Button","onClick","navigator","clipboard","writeText","setTimeout","color","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.7d8cbf42.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  Checkbox,\n  Grid,\n  Radio,\n  RadioGroup,\n  FormControlLabel,\n} from \"@material-ui/core\";\n\nexport default function Options(props) {\n  const [state, setState] = useState(props.options);\n\n  const changeState = (newState) => {\n    props.setOptions(newState);\n    setState(newState);\n  };\n\n  return (\n    <Grid container direction=\"column\" alignItems=\"center\" justify=\"center\">\n      <RadioGroup\n        row\n        value={state.radio1}\n        onChange={(event) => {\n          let stateCopy = { ...state };\n          stateCopy.radio1 = event.target.value;\n          changeState(stateCopy);\n        }}\n      >\n        <FormControlLabel value=\"normal\" control={<Radio />} label=\"Normal\" />\n        <FormControlLabel value=\"cursed\" control={<Radio />} label=\"Cursed\" />\n      </RadioGroup>\n\n      <RadioGroup\n        row\n        value={state.radio2}\n        onChange={(event) => {\n          let stateCopy = { ...state };\n          stateCopy.radio2 = event.target.value;\n          if (event.target.value === \"alternating\") {\n            stateCopy.disableCheckBoxes = false;\n          } else {\n            stateCopy.startLower = false;\n            stateCopy.startUpper = false;\n            stateCopy.disableCheckBoxes = true;\n          }\n          changeState(stateCopy);\n        }}\n      >\n        <FormControlLabel\n          value=\"alternating\"\n          control={<Radio />}\n          label=\"Alternating\"\n        />\n        <FormControlLabel value=\"random\" control={<Radio />} label=\"Random\" />\n      </RadioGroup>\n\n      <FormControlLabel\n        control={\n          <Checkbox\n            checked={state.startLower}\n            disabled={state.disableCheckBoxes}\n            onChange={() => {\n              let stateCopy = { ...state };\n              stateCopy.startLower = !stateCopy.startLower;\n              stateCopy.startUpper = false;\n              changeState(stateCopy);\n            }}\n          />\n        }\n        label=\"Words starts with Lowercase\"\n      />\n      <FormControlLabel\n        control={\n          <Checkbox\n            checked={state.startUpper}\n            disabled={state.disableCheckBoxes}\n            onChange={() => {\n              let stateCopy = { ...state };\n              stateCopy.startUpper = !stateCopy.startUpper;\n              stateCopy.startLower = false;\n              changeState(stateCopy);\n            }}\n          />\n        }\n        label=\"Words starts with Uppercase\"\n      />\n      <FormControlLabel\n        control={\n          <Checkbox\n            checked={state.showBackground}\n            onChange={() => {\n              let stateCopy = { ...state };\n              stateCopy.showBackground = !stateCopy.showBackground;\n              changeState(stateCopy);\n            }}\n          />\n        }\n        label=\"SpongeBob Background\"\n      />\n    </Grid>\n  );\n}\n","var cursed = require(\"./cursed.json\");\n\nconst getChar = (options, char) => {\n  if (options.radio1 === \"normal\") {\n    return char;\n  }\n  let num = Math.floor(Math.random() * cursed[char].length);\n  return cursed[char][num];\n};\n\nexport default function transformText(input, options) {\n  input = input.toUpperCase();\n  let output = \"\";\n\n  if (options.radio2 === \"random\") {\n    for (let i = 0; i < input.length; i++) {\n      let c = input[i];\n      if (c >= \"A\" && c <= \"Z\") {\n        output += getChar(options, Math.random() > 0.5 ? c : c.toLowerCase());\n      } else {\n        output += c;\n      }\n    }\n    return output;\n  }\n\n  let alt = true;\n  if (options.startUpper) {\n    alt = false;\n  }\n\n  for (let i = 0; i < input.length; i++) {\n    let c = input[i];\n    if (c >= \"A\" && c <= \"Z\") {\n      if (alt) {\n        c = c.toLowerCase();\n      }\n      alt = !alt;\n      output += getChar(options, c);\n    } else if (c === \" \") {\n      output += c;\n      if (options.startLower) {\n        alt = true;\n      }\n      if (options.startUpper) {\n        alt = false;\n      }\n    } else {\n      output += c;\n    }\n  }\n\n  return output;\n}\n","import React, { useState, useEffect } from \"react\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport { Box, Button, TextField, Typography } from \"@material-ui/core\";\nimport Options from \"./Options\";\nimport transformText from \"./transformText\";\nimport \"./App.css\";\n\nexport default function App() {\n  const [input, setInput] = useState(\"\");\n  const [output, setOutput] = useState(\"\");\n  const [showAlert, setShowAlert] = useState(false);\n  const [options, setOptions] = useState({\n    radio1: \"normal\",\n    radio2: \"alternating\",\n    startLower: false,\n    startUpper: false,\n    disableCheckBoxes: false,\n    showBackground: true,\n  });\n\n  useEffect(() => {\n    setOutput(transformText(input, options));\n  }, [input, options]);\n\n  if (options.showBackground) {\n    document.getElementById(\"root\").className = \"bg-image\";\n  } else {\n    document.getElementById(\"root\").className = \"\";\n  }\n\n  const copyToClipboard = () => {\n    navigator.clipboard.writeText(output);\n    setShowAlert(true);\n    setTimeout(() => {\n      setShowAlert(false);\n    }, 4000);\n  };\n\n  let alert = null;\n  if (showAlert) {\n    alert = (\n      <Alert\n        onClose={() => {\n          setShowAlert(false);\n        }}\n      >\n        Copied to clipboard\n      </Alert>\n    );\n  }\n\n  return (\n    <Box padding={5}>\n      <Typography variant=\"h3\" align=\"center\">\n        Sarcastic Text Generator\n      </Typography>\n\n      <Box m={2} />\n\n      <TextField\n        label=\"Enter Text Here\"\n        multiline\n        fullWidth\n        value={input}\n        onChange={(event) => {\n          setInput(event.target.value);\n        }}\n      />\n\n      <Box m={6} />\n\n      <TextField\n        placeholder=\"Output will come here\"\n        readOnly\n        multiline\n        fullWidth\n        value={output}\n      />\n\n      <Box m={2} />\n\n      <Button onClick={copyToClipboard} color=\"primary\" variant=\"contained\">\n        Copy\n      </Button>\n\n      {alert}\n\n      <Options options={options} setOptions={setOptions} />\n    </Box>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}