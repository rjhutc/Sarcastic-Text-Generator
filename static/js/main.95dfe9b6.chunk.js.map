{"version":3,"sources":["Options.js","transformText.js","App.js","index.js"],"names":["Options","props","useState","options","state","setState","changeState","newState","setOptions","Grid","container","direction","alignItems","justify","RadioGroup","row","value","radio1","onChange","event","stateCopy","target","FormControlLabel","control","Radio","label","radio2","disableCheckBoxes","startLower","startUpper","Checkbox","checked","disabled","showBackground","cursed","require","getChar","char","num","Math","floor","random","length","App","input","setInput","output","setOutput","showAlert","setShowAlert","useEffect","toUpperCase","i","c","toLowerCase","alt","transformText","document","getElementById","className","alert","Alert","onClose","Box","padding","Typography","variant","align","m","TextField","id","multiline","fullWidth","placeholder","readOnly","Button","onClick","select","execCommand","setTimeout","color","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.95dfe9b6.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  Checkbox,\n  Grid,\n  Radio,\n  RadioGroup,\n  FormControlLabel,\n} from \"@material-ui/core\";\n\nexport default function Options(props) {\n  const [state, setState] = useState(props.options);\n\n  const changeState = (newState) => {\n    props.setOptions(newState);\n    setState(newState);\n  };\n\n  return (\n    <Grid container direction=\"column\" alignItems=\"center\" justify=\"center\">\n      <RadioGroup\n        row\n        value={state.radio1}\n        onChange={(event) => {\n          let stateCopy = { ...state };\n          stateCopy.radio1 = event.target.value;\n          changeState(stateCopy);\n        }}\n      >\n        <FormControlLabel value=\"normal\" control={<Radio />} label=\"Normal\" />\n        <FormControlLabel value=\"cursed\" control={<Radio />} label=\"Cursed\" />\n      </RadioGroup>\n\n      <RadioGroup\n        row\n        value={state.radio2}\n        onChange={(event) => {\n          let stateCopy = { ...state };\n          stateCopy.radio2 = event.target.value;\n          if (event.target.value === \"alternating\") {\n            stateCopy.disableCheckBoxes = false;\n          } else {\n            stateCopy.startLower = false;\n            stateCopy.startUpper = false;\n            stateCopy.disableCheckBoxes = true;\n          }\n          changeState(stateCopy);\n        }}\n      >\n        <FormControlLabel\n          value=\"alternating\"\n          control={<Radio />}\n          label=\"Alternating\"\n        />\n        <FormControlLabel value=\"random\" control={<Radio />} label=\"Random\" />\n      </RadioGroup>\n\n      <FormControlLabel\n        control={\n          <Checkbox\n            checked={state.startLower}\n            disabled={state.disableCheckBoxes}\n            onChange={() => {\n              let stateCopy = { ...state };\n              stateCopy.startLower = !stateCopy.startLower;\n              stateCopy.startUpper = false;\n              changeState(stateCopy);\n            }}\n          />\n        }\n        label=\"First letter of each word is Lowercase\"\n      />\n      <FormControlLabel\n        control={\n          <Checkbox\n            checked={state.startUpper}\n            disabled={state.disableCheckBoxes}\n            onChange={() => {\n              let stateCopy = { ...state };\n              stateCopy.startUpper = !stateCopy.startUpper;\n              stateCopy.startLower = false;\n              changeState(stateCopy);\n            }}\n          />\n        }\n        label=\"First letter of each word is Uppercase\"\n      />\n      <FormControlLabel\n        control={\n          <Checkbox\n            checked={state.showBackground}\n            onChange={() => {\n              let stateCopy = { ...state };\n              stateCopy.showBackground = !stateCopy.showBackground;\n              changeState(stateCopy);\n            }}\n          />\n        }\n        label=\"SpongeBob background\"\n      />\n    </Grid>\n  );\n}\n","var cursed = require(\"./cursed.json\");\n\nconst getChar = (options, char) => {\n  if (options.radio1 === \"normal\") {\n    return char;\n  }\n  let num = Math.floor(Math.random() * cursed[char].length);\n  return cursed[char][num];\n};\n\nexport default function transformText(input, options) {\n  input = input.toUpperCase();\n  let output = \"\";\n\n  if (options.radio2 === \"random\") {\n    for (let i = 0; i < input.length; i++) {\n      let c = input[i];\n      if (c >= \"A\" && c <= \"Z\") {\n        output += getChar(options, Math.random() > 0.5 ? c : c.toLowerCase());\n      } else {\n        output += c;\n      }\n    }\n    return output;\n  }\n\n  let alt = true;\n  if (options.startUpper) {\n    alt = false;\n  }\n\n  for (let i = 0; i < input.length; i++) {\n    let c = input[i];\n    if (c >= \"A\" && c <= \"Z\") {\n      if (alt) {\n        c = c.toLowerCase();\n      }\n      alt = !alt;\n      output += getChar(options, c);\n    } else if (c === \" \") {\n      output += c;\n      if (options.startLower) {\n        alt = true;\n      }\n      if (options.startUpper) {\n        alt = false;\n      }\n    } else {\n      output += c;\n    }\n  }\n\n  return output;\n}\n","import React, { useState, useEffect } from \"react\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport { Box, Button, TextField, Typography } from \"@material-ui/core\";\nimport Options from \"./Options\";\nimport transformText from \"./transformText\";\nimport \"./App.css\";\n\nexport default function App() {\n  const [input, setInput] = useState(\"\");\n  const [output, setOutput] = useState(\"\");\n  const [showAlert, setShowAlert] = useState(false);\n  const [options, setOptions] = useState({\n    radio1: \"normal\",\n    radio2: \"alternating\",\n    startLower: false,\n    startUpper: false,\n    disableCheckBoxes: false,\n    showBackground: true,\n  });\n\n  useEffect(() => {\n    setOutput(transformText(input, options));\n  }, [input, options]);\n\n  if (options.showBackground) {\n    document.getElementById(\"root\").className = \"bg-image\";\n  } else {\n    document.getElementById(\"root\").className = \"\";\n  }\n\n  const copyToClipboard = () => {\n    document.getElementById(\"outputField\").select();\n    document.execCommand(\"copy\");\n    setShowAlert(true);\n    setTimeout(() => {\n      setShowAlert(false);\n    }, 4000);\n  };\n\n  let alert = null;\n  if (showAlert) {\n    alert = (\n      <Alert\n        onClose={() => {\n          setShowAlert(false);\n        }}\n      >\n        Copied to clipboard\n      </Alert>\n    );\n  }\n\n  return (\n    <Box padding={5}>\n      <Typography variant=\"h3\" align=\"center\">\n        Sarcastic Text Generator\n      </Typography>\n\n      <Box m={2} />\n\n      <TextField\n        id=\"inputField\"\n        label=\"Enter Text Here\"\n        multiline\n        fullWidth\n        value={input}\n        onChange={(event) => {\n          setInput(event.target.value);\n        }}\n      />\n\n      <Box m={6} />\n\n      <TextField\n        id=\"outputField\"\n        placeholder=\"Output will come here\"\n        readOnly\n        multiline\n        fullWidth\n        value={output}\n      />\n\n      <Box m={2} />\n\n      <Button onClick={copyToClipboard} color=\"primary\" variant=\"contained\">\n        Copy\n      </Button>\n\n      {alert}\n\n      <Options options={options} setOptions={setOptions} />\n    </Box>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}